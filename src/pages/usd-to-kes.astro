---
import Layout from '../layouts/Layout.astro';
import FAQSchema from '../components/FAQSchema.astro';

const pageTitle = 'USD to KSH (US Dollar to Kenya Shillings) | Live Exchange Rate & Converter';
const pageDescription = 'Convert USD to KSH (KES) with live exchange rates. Check how much your US Dollars are worth in Kenyan Shillings today. Quick, accurate currency conversion for USD to KES, USD in KSH, and USD KSH rates.';
const canonicalUrl = '/usd-to-kes';

const faqItems = [
  {
    question: 'What is 1 USD in KSH?',
    answer: '1 US Dollar (USD) equals approximately 129.50 Kenyan Shillings (KSH) as of the latest exchange rate. Use our converter above for real-time rates.'
  },
  {
    question: 'How much is 100 USD in KSH?',
    answer: '100 US Dollars (USD) equals approximately 12,950 Kenyan Shillings (KSH). The exact amount may vary based on the current exchange rate.'
  },
  {
    question: 'Is KSH and KES the same?',
    answer: 'Yes, KSH and KES both refer to the Kenyan Shilling. "KES" is the ISO currency code, while "KSH" is a common abbreviation.'
  },
  {
    question: 'What is the difference between USD to KES and USD to KSH?',
    answer: 'There is no difference - KES and KSH both represent the Kenyan Shilling. KES is the ISO code, while KSH is a common abbreviation. Both terms refer to the same currency.'
  }
];
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  canonicalUrl={canonicalUrl}
>
  <main class="bg-gray-900 text-white min-h-screen p-6">
    <div class="max-w-4xl mx-auto">
      <div class="mb-8">
        <a href="/" class="text-emerald-400 hover:text-emerald-300 flex items-center mb-6">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
          </svg>
          Back to Home
        </a>
        <h1 class="text-3xl font-bold mb-2">USD to KES Converter</h1>
        <p class="text-gray-400">Convert US Dollars (USD) to Kenyan Shillings (KES) using our live exchange rate calculator.</p>
      </div>

      <div class="bg-gray-800 rounded-lg p-6 mb-8">
        <div id="converter-section" class="flex flex-col md:flex-row gap-6">
          <div class="flex-1">
            <label for="usd-amount" class="block text-sm font-medium text-gray-300 mb-2">Amount in <span id="from-currency">USD</span></label>
            <div class="relative">
              <div id="from-currency-symbol" class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span class="text-gray-400">$</span>
              </div>
              <input
                type="number"
                id="usd-amount"
                class="bg-gray-700 text-white rounded-lg pl-12 pr-4 py-3 w-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
                placeholder="0.00"
                step="0.01"
                min="0"
              />
            </div>
              <!-- Preset amounts removed as per user request -->
          </div>
          
          <div class="flex items-center justify-center">
            <button id="swap-currencies" class="bg-gray-700 p-2 rounded-full hover:bg-gray-600 transition-colors" aria-label="Swap currencies">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
              </svg>
            </button>
          </div>
          
          <div class="flex-1">
            <label for="kes-amount" class="block text-sm font-medium text-gray-300 mb-2">Amount in <span id="to-currency">KES</span></label>
            <div class="relative">
              <div id="to-currency-symbol" class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span class="text-gray-400">KSh</span>
              </div>
              <input
                type="number"
                id="kes-amount"
                class="bg-gray-700 text-white rounded-lg pl-16 pr-4 py-3 w-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
                placeholder="0.00"
                readonly
              />
            </div>
          </div>
        </div>
        
        <div class="mt-6 pt-6 border-t border-gray-700">
          <div class="flex justify-between items-center">
            <div class="text-sm text-gray-400">
              <span id="rate-display">1 USD = 0.00 KES</span>
              <span id="last-updated" class="block text-xs mt-1">Updating rates...</span>
            </div>
            <button id="refresh-rates" class="text-emerald-400 hover:text-emerald-300 text-sm font-medium flex items-center">
              <svg id="refresh-icon" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Refresh Rates
            </button>
          </div>
        </div>
      </div>

      <!-- Common Conversions -->
      <div class="bg-gray-800 p-6 rounded-lg mb-8">
        <h3 class="text-lg font-semibold mb-4">Common USD to KSH Conversions</h3>
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 text-sm">
          <a href="#" class="usd-amount-btn block p-3 bg-gray-700 rounded-lg hover:bg-gray-600 text-center transition-colors" data-amount="1">1 USD to KSH</a>
          <a href="#" class="usd-amount-btn block p-3 bg-gray-700 rounded-lg hover:bg-gray-600 text-center transition-colors" data-amount="5">5 USD to KSH</a>
          <a href="#" class="usd-amount-btn block p-3 bg-gray-700 rounded-lg hover:bg-gray-600 text-center transition-colors" data-amount="10">10 USD to KSH</a>
          <a href="#" class="usd-amount-btn block p-3 bg-gray-700 rounded-lg hover:bg-gray-600 text-center transition-colors" data-amount="50">50 USD to KSH</a>
          <a href="#" class="usd-amount-btn block p-3 bg-gray-700 rounded-lg hover:bg-gray-600 text-center transition-colors" data-amount="100">100 USD to KSH</a>
          <a href="#" class="usd-amount-btn block p-3 bg-gray-700 rounded-lg hover:bg-gray-600 text-center transition-colors" data-amount="250">250 USD to KSH</a>
          <a href="#" class="usd-amount-btn block p-3 bg-gray-700 rounded-lg hover:bg-gray-600 text-center transition-colors" data-amount="500">500 USD to KSH</a>
          <a href="#" class="usd-amount-btn block p-3 bg-gray-700 rounded-lg hover:bg-gray-600 text-center transition-colors" data-amount="1000">1000 USD to KSH</a>
        </div>
      </div>

      <div class="prose prose-invert max-w-none">
        <h2 class="text-2xl font-bold mb-6 text-emerald-400">USD to KSH (KES) Exchange Rate Today</h2>
        
        <div class="bg-gray-800 p-6 rounded-lg mb-8">
          <h3 class="text-xl font-semibold mb-4">Current Exchange Rate</h3>
          <p class="text-gray-300 mb-4">
            As of <span id="current-date">{new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</span>, the exchange rate is:
          </p>
          <div class="text-3xl font-bold text-emerald-400 mb-4">1 USD = <span id="current-rate">0.00</span> KES</div>
          <p class="text-sm text-gray-400">Rates are updated every 5 minutes. Last updated: <span id="last-updated-time">Just now</span></p>
        </div>

        <h3 class="text-xl font-semibold mb-4 mt-8">How to Convert USD to KES</h3>
        <div class="grid md:grid-cols-2 gap-8 mb-8">
          <div>
            <ol class="list-decimal pl-5 space-y-3 text-gray-300">
              <li>Enter the amount in US Dollars (USD) in the input field above</li>
              <li>The equivalent amount in Kenyan Shillings (KES) will be calculated automatically</li>
              <li>Use the preset amounts for quick conversions of common values</li>
              <li>Click the swap button to convert from KES to USD instead</li>
            </ol>
          </div>
          <!-- Quick Conversions removed as per user request -->
        </div>

        <h3 class="text-xl font-semibold mb-4">Understanding USD to KES Exchange Rate</h3>
        <div class="bg-gray-800 p-6 rounded-lg mb-8">
          <h4 class="font-semibold mb-3">Factors Affecting USD/KES Exchange Rate</h4>
          <ul class="list-disc pl-5 space-y-2 text-gray-300">
            <li><strong>Interest Rates:</strong> The Central Bank of Kenya's monetary policy affects the shilling's value</li>
            <li><strong>Inflation Rates:</strong> Higher inflation in Kenya compared to the US can devalue the shilling</li>
            <li><strong>Economic Performance:</strong> Kenya's GDP growth and economic stability impact the exchange rate</li>
            <li><strong>Political Stability:</strong> Political events and stability in Kenya influence investor confidence</li>
            <li><strong>Trade Balance:</strong> The balance of trade between Kenya and the US affects currency demand</li>
          </ul>
        </div>

        <h3 class="text-xl font-semibold mb-4">Best Practices for Currency Exchange</h3>
        <div class="grid md:grid-cols-2 gap-8 mb-8">
          <div>
            <h4 class="font-semibold mb-3">When to Exchange USD to KES</h4>
            <ul class="list-disc pl-5 space-y-2 text-gray-300">
              <li>Monitor exchange rate trends to identify favorable rates</li>
              <li>Consider exchanging when the Kenyan shilling is strong</li>
              <li>Avoid exchanging large amounts during periods of high volatility</li>
              <li>Watch for seasonal trends that might affect exchange rates</li>
            </ul>
          </div>
          <div class="bg-gray-800 p-6 rounded-lg">
            <h4 class="font-semibold mb-3">Sending Money to Kenya</h4>
            <ul class="list-disc pl-5 space-y-2 text-gray-300">
              <li>Compare exchange rates from different providers</li>
              <li>Be aware of transfer fees and hidden charges</li>
              <li>Consider using online money transfer services for better rates</li>
              <li>Check if your bank offers preferential rates for large transfers</li>
            </ul>
          </div>
        </div>

        <h3 class="text-xl font-semibold mb-4">Historical USD to KES Performance</h3>
        <p class="text-gray-300 mb-4">
          The US Dollar to Kenyan Shilling exchange rate has experienced various fluctuations over the years. 
          While the general trend has seen the Kenyan shilling gradually depreciate against the US dollar, 
          there have been periods of relative stability and even appreciation.
        </p>
        <div class="bg-gray-800 p-6 rounded-lg mb-8">
          <h4 class="font-semibold mb-3">Recent Trends</h4>
          <ul class="list-disc pl-5 space-y-2 text-gray-300">
            <li>In the past year (2024-2025), the exchange rate has ranged between 128.50 and 162.29 KES per 1 USD</li>
            <li>The Kenyan shilling has shown significant volatility, with a 21% depreciation in 2023, followed by a strong recovery in 2024</li>
            <li>Key events affecting recent rates include:
              <ul class="list-disc pl-5 mt-2 space-y-1">
                <li>Successful Eurobond issuance in early 2024 that boosted market confidence</li>
                <li>Central Bank of Kenya's monetary policy adjustments to stabilize the shilling</li>
                <li>Global economic conditions and US Federal Reserve interest rate decisions</li>
                <li>Improved foreign exchange reserves position in 2024</li>
              </ul>
            </li>
            <li>As of mid-2025, the shilling has been trading in a relatively stable range around 129-130 KES per USD</li>
          </ul>
        </div>
      </div>

      <div class="mt-12 bg-gray-800 p-6 rounded-lg">
        <h3 class="text-xl font-semibold mb-4">Need to Send Money to Kenya?</h3>
        <p class="text-gray-300 mb-4">
          Compare the best money transfer services to get the most Kenyan shillings for your US dollars. 
          We've analyzed the top providers to help you save on fees and get the best exchange rates.
        </p>
        <a href="/blog/compare-money-transfer-services" class="inline-flex items-center px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-md transition-colors">
          Compare Money Transfer Services
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
    </div>
  </main>

  <script>
    // Handle common conversion buttons
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('usd-amount-btn')) {
        e.preventDefault();
        const amount = e.target.getAttribute('data-amount');
        document.getElementById('usd-amount').value = amount;
        // Trigger input event to update conversion
        document.getElementById('usd-amount').dispatchEvent(new Event('input'));
        // Smooth scroll to converter
        document.getElementById('converter-section').scrollIntoView({ behavior: 'smooth' });
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
      // DOM Elements
      const usdAmountInput = document.getElementById('usd-amount');
      const kesAmountInput = document.getElementById('kes-amount');
      const rateDisplay = document.getElementById('rate-display');
      const lastUpdated = document.getElementById('last-updated');
      const refreshBtn = document.getElementById('refresh-rates');
      const refreshIcon = document.getElementById('refresh-icon');
      const swapBtn = document.getElementById('swap-currencies');
      const presetButtons = document.querySelectorAll('[data-amount]');
      const currentRateElement = document.getElementById('current-rate');
      const lastUpdatedTimeElement = document.getElementById('last-updated-time');
      const quickConversionElements = {
        1: document.getElementById('rate-1'),
        5: document.getElementById('rate-5'),
        10: document.getElementById('rate-10'),
        50: document.getElementById('rate-50'),
        100: document.getElementById('rate-100')
      };

      // State
      let currentRate = 0;
      let lastRate = 0;
      let lastUpdateTime = null;
      let isSwapped = false;
      let refreshInterval;
      const REFRESH_INTERVAL_MS = 5 * 60 * 1000; // 5 minutes
      
      // Check if we have cached rate data
      const cachedRateData = localStorage.getItem('usdKesRateData');
      if (cachedRateData) {
        try {
          const { rate, timestamp } = JSON.parse(cachedRateData);
          // Only use cache if it's less than 1 hour old
          if (Date.now() - timestamp < 60 * 60 * 1000) {
            currentRate = rate;
            lastRate = rate;
            lastUpdateTime = new Date(timestamp);
            updateRateDisplay();
            updateQuickConversions();
          }
        } catch (e) {
          console.error('Error parsing cached rate data:', e);
        }
      }

      // Fetch exchange rate from API
      async function fetchExchangeRate() {
        try {
          // Show loading state
          refreshBtn.disabled = true;
          refreshIcon.classList.add('animate-spin');
          
          // Add timestamp to prevent caching
          const timestamp = new Date().getTime();
          
          // Try multiple API endpoints for redundancy
          const endpoints = [
            'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.json',
            'https://open.er-api.com/v6/latest/USD',
            'https://api.exchangerate-api.com/v4/latest/USD'
          ];
          
          let rateFetched = false;
          
          for (const endpoint of endpoints) {
            try {
              const response = await fetch(`${endpoint}?t=${timestamp}`);
              
              if (!response.ok) continue;
              
              const data = await response.json();
              
              // Handle different API response formats
              let newRate;
              if (endpoint.includes('@fawazahmed0')) {
                newRate = data.usd.kes;
              } else if (endpoint.includes('open.er-api.com')) {
                newRate = data.rates.KES;
              } else if (endpoint.includes('exchangerate-api.com')) {
                newRate = data.rates.KES;
              } else {
                continue;
              }
              
              if (newRate && newRate > 0) {
                lastRate = currentRate || newRate; // Store previous rate for comparison
                currentRate = newRate;
                lastUpdateTime = new Date();
                
                // Cache the rate data
                localStorage.setItem('usdKesRateData', JSON.stringify({
                  rate: currentRate,
                  timestamp: lastUpdateTime.getTime()
                }));
                
                updateRateDisplay();
                updateQuickConversions();
                updateConversion();
                
                // Show success state briefly
                showNotification('Rates updated', 'success');
                rateFetched = true;
                break;
              }
            } catch (e) {
              console.warn(`Failed to fetch from ${endpoint}:`, e);
              continue;
            }
          }
          
          if (!rateFetched) {
            throw new Error('All API endpoints failed');
          }
          
          return true;
        } catch (error) {
          console.error('Error fetching exchange rate:', error);
          showNotification('Failed to update rates. Using cached data if available.', 'error');
          return false;
        } finally {
          refreshBtn.disabled = false;
          refreshIcon.classList.remove('animate-spin');
        }
      }
      
      // Format the last updated time
      function updateLastUpdatedText() {
        if (lastUpdateTime) {
          const options = { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZoneName: 'short'
          };
          const formattedTime = lastUpdateTime.toLocaleString('en-US', options);
          lastUpdated.textContent = `Updated: ${formattedTime}`;
          if (lastUpdatedTimeElement) {
            lastUpdatedTimeElement.textContent = formattedTime;
          }
        }
      }

      // Update the rate display with change indicator
      function updateRateDisplay() {
        if (!currentRate) return;
        
        const rateChange = currentRate - lastRate;
        const changePercent = (Math.abs(rateChange) / lastRate * 100).toFixed(2);
        let changeIndicator = '';
        
        if (rateChange > 0) {
          changeIndicator = ` <span class="text-green-400">↑ ${changePercent}%</span>`;
        } else if (rateChange < 0) {
          changeIndicator = ` <span class="text-red-400">↓ ${changePercent}%</span>`;
        }
        
        if (isSwapped) {
          const inverseRate = (1 / currentRate).toFixed(6);
          rateDisplay.innerHTML = `1 KES = ${inverseRate} USD${changeIndicator}`;
          if (currentRateElement) {
            currentRateElement.textContent = inverseRate;
          }
        } else {
          const formattedRate = currentRate.toFixed(2);
          rateDisplay.innerHTML = `1 USD = ${formattedRate} KES${changeIndicator}`;
          if (currentRateElement) {
            currentRateElement.textContent = formattedRate;
          }
        }
        updateLastUpdatedText();
      }

      // Update the conversion
      function updateConversion() {
        if (!currentRate) return;
        
        let inputValue = parseFloat(usdAmountInput.value) || 0;
        
        if (isSwapped) {
          // When swapped, input is KES, output is USD
          const usdValue = (inputValue / currentRate).toFixed(2);
          kesAmountInput.value = usdValue;
        } else {
          // Normal mode: input is USD, output is KES
          const kesValue = (inputValue * currentRate).toFixed(2);
          kesAmountInput.value = kesValue;
        }
      }
      
      // Update quick conversion examples
      function updateQuickConversions() {
        if (!currentRate) return;
        
        Object.entries(quickConversionElements).forEach(([amount, element]) => {
          if (element) {
            const convertedAmount = (amount * currentRate).toFixed(2);
            element.textContent = `${convertedAmount} KES`;
          }
        });
      }
      
      // Show notification to user
      function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 ${
          type === 'error' ? 'bg-red-600' : type === 'success' ? 'bg-green-600' : 'bg-blue-600'
        } text-white`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        // Auto-remove after 3 seconds
        setTimeout(() => {
          notification.style.opacity = '0';
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }
      
      // Start auto-refresh interval
      function startAutoRefresh() {
        // Clear any existing interval
        if (refreshInterval) {
          clearInterval(refreshInterval);
        }
        
        // Set up new interval
        refreshInterval = setInterval(() => {
          fetchExchangeRate();
        }, REFRESH_INTERVAL_MS);
      }

      // Toggle between USD→KES and KES→USD
      function swapCurrencies() {
        isSwapped = !isSwapped;
        
        // Swap input values
        const usdValue = usdAmountInput.value;
        const kesValue = kesAmountInput.value;
        
        usdAmountInput.value = kesValue;
        kesAmountInput.value = usdValue;
        
        // Update currency labels and symbols
        const fromCurrency = document.getElementById('from-currency');
        const toCurrency = document.getElementById('to-currency');
        const fromSymbol = document.getElementById('from-currency-symbol');
        const toSymbol = document.getElementById('to-currency-symbol');
        const presetAmounts = document.getElementById('preset-amounts');
        
        if (isSwapped) {
          fromCurrency.textContent = 'KES';
          toCurrency.textContent = 'USD';
          fromSymbol.innerHTML = '<span class="text-gray-400">KSh</span>';
          toSymbol.innerHTML = '<span class="text-gray-400">$</span>';
          presetAmounts.classList.add('hidden');
          // Adjust input padding for KSh symbol
          usdAmountInput.classList.remove('pl-12');
          usdAmountInput.classList.add('pl-16');
        } else {
          fromCurrency.textContent = 'USD';
          toCurrency.textContent = 'KES';
          fromSymbol.innerHTML = '<span class="text-gray-400">$</span>';
          toSymbol.innerHTML = '<span class="text-gray-400">KSh</span>';
          presetAmounts.classList.remove('hidden');
          // Reset input padding for $ symbol
          usdAmountInput.classList.remove('pl-16');
          usdAmountInput.classList.add('pl-12');
        }
        
        updateRateDisplay();
      }

      // Event Listeners
      usdAmountInput.addEventListener('input', updateConversion);
      
      // Handle paste event to clean input
      usdAmountInput.addEventListener('paste', (e) => {
        e.preventDefault();
        const text = (e.clipboardData || window.clipboardData).getData('text');
        const cleanValue = text.replace(/[^0-9.]/g, '');
        const parts = cleanValue.split('.');
        
        if (parts.length > 2) {
          // If more than one decimal point, only keep the first one
          usdAmountInput.value = `${parts[0]}.${parts[1]}`;
        } else {
          usdAmountInput.value = cleanValue;
        }
        
        updateConversion();
      });
      
      // Refresh button with loading state
      refreshBtn.addEventListener('click', async () => {
        refreshIcon.classList.add('animate-spin');
        await fetchExchangeRate();
        refreshIcon.classList.remove('animate-spin');
      });
      
      // Swap currencies
      swapBtn.addEventListener('click', () => {
        swapCurrencies();
        // Show notification about the swap
        showNotification(
          isSwapped 
            ? 'Now converting KES to USD' 
            : 'Now converting USD to KES',
          'info'
        );
      });
      
      // Preset amount buttons
      presetButtons.forEach(button => {
        button.addEventListener('click', () => {
          const amount = button.getAttribute('data-amount');
          usdAmountInput.value = amount;
          updateConversion();
          
          // Smooth scroll to the input
          usdAmountInput.focus();
          window.scrollTo({
            top: usdAmountInput.offsetTop - 100,
            behavior: 'smooth'
          });
          
          // Show a quick tooltip
          showNotification(`Converted $${amount} to KES`, 'info');
        });
      });
      
      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        // Ctrl+Enter or Cmd+Enter to refresh
        if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
          e.preventDefault();
          fetchExchangeRate();
        }
        // s to swap currencies
        else if (e.key === 's' && !e.ctrlKey && !e.metaKey && !e.altKey) {
          e.preventDefault();
          swapCurrencies();
        }
      });

      // Initial setup
      fetchExchangeRate().then(() => {
        // Only start auto-refresh after first successful fetch
        startAutoRefresh();
      });
      
      // Update time display every minute
      setInterval(updateLastUpdatedText, 60000);
    });
  </script>
  
  <FAQSchema faqItems={faqItems} />
</Layout>
