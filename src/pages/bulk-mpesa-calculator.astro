---
import Layout from '../layouts/Layout.astro';
import FAQSchema from '../components/FAQSchema.astro';

// SEO Metadata
const pageTitle = 'Bulk M-PESA Fee Calculator | Calculate Multiple Transaction Fees';
const pageDescription = 'Calculate M-PESA Paybill and Send Money fees for multiple transactions at once. Perfect for businesses, SACCOs, and NGOs processing bulk payments in Kenya.';
const canonicalUrl = '/bulk-mpesa-calculator';
const keywords = 'bulk M-PESA calculator, M-PESA business fees, multiple M-PESA transactions, calculate paybill charges, bulk payment fees Kenya, M-PESA business calculator, M-PESA bulk payment, M-PESA transaction fees, business M-PESA fees, M-PESA for SACCOs, M-PESA for NGOs, Kenya mobile money fees';

// M-PESA Fee Structure (same as single transaction calculator)
const FEE_BACKBONE = [
  { min: 1, max: 100, fee: 0 },
  { min: 101, max: 500, fee: 11 },
  { min: 501, max: 1000, fee: 15 },
  { min: 1001, max: 1500, fee: 25 },
  { min: 1501, max: 2500, fee: 30 },
  { min: 2501, max: 3500, fee: 57 },
  { min: 3501, max: 5000, fee: 82 },
  { min: 5001, max: 7500, fee: 95 },
  { min: 7501, max: 10000, fee: 100 },
  { min: 10001, max: 15000, fee: 110 },
  { min: 15001, max: 20000, fee: 120 },
  { min: 20001, max: 70000, fee: 120 + Math.ceil((20000 - 20001) / 1000) * 5 } // 5 KES per 1000 after 20,000
];

// Calculate fee for a single amount
function calculateMpesaFee(amount) {
  if (amount < 1) return 0;
  
  // For amounts over 20,000, the fee is 120 + 5 KES for every 1,000 KES
  if (amount > 20000) {
    return 120 + Math.ceil((amount - 20000) / 1000) * 5;
  }
  
  // For amounts up to 20,000, use the fee backbone
  const bracket = FEE_BACKBONE.find(b => amount >= b.min && amount <= b.max);
  return bracket ? bracket.fee : 0;
}

// FAQ Schema Data
const faqItems = [
  {
    question: 'How do I use the Bulk M-PESA Fee Calculator?',
    answer: 'To use the calculator: 1) Enter amounts separated by commas or upload a CSV file, 2) Choose who pays the fees (Customer or Business), 3) View the detailed breakdown of each transaction with its fee and total amount. The calculator will automatically process all amounts and provide a summary of total fees.'
  },
  {
    question: 'What is the difference between "Customer Pays Fees" and "Business Pays Fees"?',
    answer: 'When "Customer Pays Fees" is selected, the customer bears the M-PESA transaction fees on top of the amount being sent. When "Business Pays Fees" is selected, the business absorbs the fees from the amount being sent. The calculator adjusts the totals accordingly to show you the net amount that will be received in each scenario.'
  },
  {
    question: 'Can I upload a CSV file with transaction amounts?',
    answer: 'Yes, you can either paste amounts separated by commas or upload a CSV file. The CSV should have one amount per row in a single column. The first row will be treated as a header and skipped, so make sure your amounts start from the second row.'
  },
  {
    question: 'Are these the official M-PESA fees?',
    answer: 'Yes, the calculator uses the official M-PESA tariff structure for Paybill and Send Money transactions. However, fees may change without notice. For the most current fees, please check the official Safaricom website or your M-PESA statement.'
  },
  {
    question: 'Is there a limit to the number of transactions I can calculate at once?',
    answer: 'The calculator can handle a large number of transactions, but for optimal performance, we recommend processing up to 1,000 transactions at a time. For larger batches, consider splitting them into multiple smaller batches.'
  },
  {
    question: 'Can I save or export the calculation results?',
    answer: 'Yes, after calculating, you can export the results to a CSV file by clicking the "Export to CSV" button. This will download a file with all transaction details including amounts, fees, and totals.'
  },
  {
    question: 'Does this calculator work for both Paybill and Send Money transactions?',
    answer: 'Yes, the calculator works for both Paybill and Send Money transactions as they share the same fee structure. However, please note that some business accounts may have negotiated different rates with Safaricom.'
  },
  {
    question: 'How accurate is the Bulk M-PESA Fee Calculator?',
    answer: 'The calculator is highly accurate and uses the official M-PESA fee structure. However, for very large transactions (over 70,000 KES) or special business accounts with custom rates, there might be slight variations. Always verify with your bank or Safaricom for exact amounts when processing critical transactions.'
  }
];

// Structured Data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "WebApplication",
  "name": "Bulk M-PESA Fee Calculator",
  "description": pageDescription,
  "url": `https://convertksh.xyz${canonicalUrl}`,
  "keywords": keywords,
  "applicationCategory": "FinanceApplication",
  "operatingSystem": "Web",
  "offers": {
    "@type": "Offer",
    "price": "0",
    "priceCurrency": "KES"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Convert KSH",
    "url": "https://convertksh.xyz"
  },
  "inLanguage": "en",
  "about": ["Mobile Money", "M-PESA", "Business Finance", "Bulk Payments"],
  "audience": {
    "@type": "Audience",
    "name": "Businesses, SACCOs, and NGOs in Kenya"
  },
  "countryOfOrigin": {
    "@type": "Country",
    "name": "Kenya"
  }
};
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  canonicalUrl={canonicalUrl}
  structuredData={structuredData}
>
  <main class="bg-gray-900 text-white min-h-screen py-12 px-4">
    <div class="max-w-4xl mx-auto">
      <div class="text-center mb-10">
        <h1 class="text-4xl font-bold mb-3 text-emerald-400">Bulk M-PESA Fee Calculator</h1>
        <p class="text-gray-300 max-w-3xl mx-auto">
          Calculate M-PESA Paybill and Send Money fees for multiple transactions at once. 
          Perfect for businesses, SACCOs, and NGOs processing bulk payments in Kenya.
        </p>
      </div>

      <div class="bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Input Section */}
          <div class="space-y-4">
            <div>
              <label for="amounts" class="block text-sm font-medium text-gray-300 mb-2">
                Enter amounts (comma-separated or one per line)
              </label>
              <textarea
                id="amounts"
                rows="8"
                class="w-full bg-gray-700 text-white rounded-lg p-3 border border-gray-600 focus:ring-2 focus:ring-emerald-500 focus:border-transparent font-mono text-sm"
                placeholder="Example 1 (simple): 500, 1000, 2000, 5000

Example 2 (with quantities):
500x10   (10 people receiving 500 KES each)
1000x5   (5 people receiving 1000 KES each)
2000x2   (2 people receiving 2000 KES each)"
              ></textarea>
              <p class="mt-1 text-sm text-gray-400">
                <span class="block mb-1">Or upload a CSV file (one amount per line):</span>
                <input type="file" id="csv-upload" accept=".csv" class="hidden">
                <button type="button" id="upload-btn" class="bg-gray-700 hover:bg-gray-600 text-white text-sm py-1 px-3 rounded border border-gray-600 focus:outline-none focus:ring-2 focus:ring-emerald-500">
                  Choose File
                </button>
                <span id="file-name" class="ml-2 text-sm text-gray-400">No file chosen</span>
              </p>
            </div>

            <div class="pt-2">
              <label class="block text-sm font-medium text-gray-300 mb-2">
                Who pays the fees?
              </label>
              <div class="flex space-x-4">
                <label class="inline-flex items-center">
                  <input type="radio" name="fee-payer" value="customer" class="text-emerald-500" checked>
                  <span class="ml-2 text-gray-300">Customer Pays Fees</span>
                </label>
                <label class="inline-flex items-center">
                  <input type="radio" name="fee-payer" value="business" class="text-emerald-500">
                  <span class="ml-2 text-gray-300">Business Pays Fees</span>
                </label>
              </div>
            </div>

            <div class="pt-2">
              <button
                id="calculate-btn"
                class="w-full bg-emerald-600 hover:bg-emerald-700 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 focus:ring-offset-gray-800"
              >
                Calculate Fees
              </button>
            </div>
          </div>

          {/* Results Section */}
          <div class="bg-gray-700 rounded-lg p-4">
            <h3 class="text-lg font-medium text-white mb-4 pb-2 border-b border-gray-600">
              Calculation Results
            </h3>
            
            <div id="results-summary" class="mb-4 p-3 bg-gray-800 rounded-lg">
              <div class="grid grid-cols-2 gap-2 text-sm">
                <div class="text-gray-400">Total Transactions:</div>
                <div id="total-transactions" class="text-right">0</div>
                
                <div class="text-gray-400">Total Amount:</div>
                <div id="total-amount" class="text-right">KSh 0.00</div>
                
                <div class="text-gray-400">Total Fees:</div>
                <div id="total-fees" class="text-right">KSh 0.00</div>
                
                <div class="font-medium text-emerald-400">Grand Total:</div>
                <div id="grand-total" class="text-right font-medium text-emerald-400">KSh 0.00</div>
              </div>
            </div>
            
            <div class="max-h-64 overflow-y-auto">
              <table class="min-w-full divide-y divide-gray-600 text-sm">
                <thead class="sticky top-0 bg-gray-700">
                  <tr>
                    <th class="px-3 py-2 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Amount</th>
                    <th class="px-3 py-2 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Fee</th>
                    <th class="px-3 py-2 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Total</th>
                  </tr>
                </thead>
                <tbody id="results-body" class="divide-y divide-gray-700">
                  <tr>
                    <td colspan="3" class="px-3 py-4 text-center text-sm text-gray-400">
                      Enter amounts and click "Calculate Fees"
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            
            <div class="mt-4 flex justify-end">
              <button
                id="export-csv"
                disabled
                class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-emerald-400 bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg class="-ml-0.5 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Export to CSV
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="prose prose-invert max-w-none mt-12">
        <h2 class="text-2xl font-bold mb-4">How to Use the Bulk M-PESA Fee Calculator</h2>
        <p class="mb-4">
          Our Bulk M-PESA Fee Calculator is designed to simplify the process of calculating fees for multiple M-PESA transactions at once. 
          Whether you're a business owner, accountant, or financial officer, this tool will save you time and reduce errors in your calculations.
        </p>
        
        <h3 class="text-xl font-semibold mt-6 mb-3">Step-by-Step Guide</h3>
        <ol class="list-decimal pl-5 mb-4 space-y-2">
          <li><strong>Enter Transaction Amounts</strong>: Type or paste the amounts you want to send, separated by commas or one per line.</li>
          <li><strong>Or Upload a CSV File</strong>: Click "Choose File" to upload a CSV file containing the transaction amounts.</li>
          <li><strong>Select Who Pays the Fees</strong>: Choose whether the customer or your business will cover the M-PESA transaction fees.</li>
          <li><strong>Click "Calculate Fees"</strong>: The calculator will process all amounts and display a detailed breakdown.</li>
          <li><strong>Review the Results</strong>: See the total fees, amounts, and grand total. Export to CSV if needed for your records.</li>
        </ol>

        <h3 class="text-xl font-semibold mt-6 mb-3">Who Can Benefit from This Tool?</h3>
        <ul class="list-disc pl-5 mb-4 space-y-2">
          <li><strong>Small Businesses</strong>: Calculate fees for multiple supplier or employee payments.</li>
          <li><strong>SACCOs</strong>: Process bulk disbursements to members with accurate fee calculations.</li>
          <li><strong>NGOs</strong>: Manage multiple beneficiary payments with transparent fee structures.</li>
          <li><strong>Agents & Resellers</strong>: Quickly calculate fees for multiple customer transactions.</li>
          <li><strong>Accountants & Financial Officers</strong>: Streamline financial planning and budgeting for M-PESA transactions.</li>
        </ul>

        <h3 class="text-xl font-semibold mt-6 mb-3">Understanding M-PESA Fees</h3>
        <p class="mb-4">
          M-PESA charges fees based on the amount being sent. The fee structure is progressive, meaning different portions of the amount 
          are charged at different rates. Our calculator automatically applies the correct fee structure based on Safaricom's official rates.
        </p>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-700">
            <thead class="bg-gray-800">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Amount Range (KES)</th>
                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Fee (KES)</th>
              </tr>
            </thead>
            <tbody class="bg-gray-700 divide-y divide-gray-600">
              {FEE_BACKBONE.map((bracket, index) => (
                <tr key={index}>
                  <td class="px-6 py-2 whitespace-nowrap text-sm text-gray-300">
                    {bracket.min.toLocaleString()} - {bracket.max !== 70000 ? bracket.max.toLocaleString() : 'Above'} KES
                  </td>
                  <td class="px-6 py-2 whitespace-nowrap text-right text-sm text-gray-300">
                    {bracket.fee.toLocaleString()} KES
                  </td>
                </tr>
              ))}
              <tr>
                <td class="px-6 py-2 whitespace-nowrap text-sm text-gray-300">Above 20,000 KES</td>
                <td class="px-6 py-2 whitespace-nowrap text-right text-sm text-gray-300">120 KES + 5 KES per 1,000 KES</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div class="mt-8 p-4 bg-blue-900/20 border border-blue-700 rounded-lg">
          <h3 class="text-lg font-semibold text-blue-300 mb-2">💡 Pro Tip</h3>
          <p class="text-blue-100">
            For large transactions, it's often more cost-effective to make fewer, larger transfers rather than many small ones. 
            The fee structure favors larger amounts, with the per-transaction fee becoming a smaller percentage of the total as the amount increases.
          </p>
        </div>
      </div>
    </div>
  </main>

  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      console.log('Bulk M-PESA Calculator: DOM fully loaded');
      
      // M-PESA Fee Structure
      const FEE_BACKBONE = [
        { min: 1, max: 100, fee: 0 },
        { min: 101, max: 500, fee: 11 },
        { min: 501, max: 1000, fee: 15 },
        { min: 1001, max: 1500, fee: 25 },
        { min: 1501, max: 2500, fee: 30 },
        { min: 2501, max: 3500, fee: 57 },
        { min: 3501, max: 5000, fee: 82 },
        { min: 5001, max: 7500, fee: 95 },
        { min: 7501, max: 10000, fee: 100 },
        { min: 10001, max: 15000, fee: 110 },
        { min: 15001, max: 20000, fee: 120 }
      ];
      
      // DOM Elements
      const amountsInput = document.getElementById('amounts');
      const csvUpload = document.getElementById('csv-upload');
      const uploadBtn = document.getElementById('upload-btn');
      const fileName = document.getElementById('file-name');
      const calculateBtn = document.getElementById('calculate-btn');
      const feePayerRadios = document.getElementsByName('fee-payer');
      const resultsBody = document.getElementById('results-body');
      const totalTransactions = document.getElementById('total-transactions');
      const totalAmount = document.getElementById('total-amount');
      const totalFees = document.getElementById('total-fees');
      const grandTotal = document.getElementById('grand-total');
      const exportCsvBtn = document.getElementById('export-csv');

      // M-PESA fee calculation function
      function calculateMpesaFee(amount) {
        // Convert to number in case it's a string
        amount = Number(amount);
        if (isNaN(amount) || amount < 1) return 0;
        
        // For amounts over 20,000, the fee is 120 + 5 KES for every 1,000 KES
        if (amount > 20000) {
          return 120 + Math.ceil((amount - 20000) / 1000) * 5;
        }
        
        // For amounts up to 20,000, use the fee backbone
        const bracket = FEE_BACKBONE.find(b => amount >= b.min && amount <= b.max);
        return bracket ? bracket.fee : 0;
      }

      // Parse CSV file
      function parseCSV(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          
          reader.onload = (event) => {
            try {
              const text = event.target.result;
              const lines = text.split(/\r?\n/);
              // Skip header row and filter out empty lines
              const amounts = lines.slice(1).filter(line => line.trim() !== '');
              resolve(amounts);
            } catch (error) {
              reject(error);
            }
          };
          
          reader.onerror = () => {
            reject(new Error('Error reading CSV file'));
          };
          
          reader.readAsText(file);
        });
      }

      // Process amounts and calculate fees
      function processAmounts(amountsText) {
        const feePayer = document.querySelector('input[name="fee-payer"]:checked').value;
        let totalFeesAmount = 0;
        let totalAmountValue = 0;
        let allAmounts = [];
        
        // Clear previous results
        resultsBody.innerHTML = '';
        
        // Process each line - split by commas, newlines, or semicolons
        const lines = amountsText.split(/[\n,;]+/).map(line => line.trim()).filter(line => line !== '');
        
        console.log('Processing lines:', lines); // Debug log
        
        for (const line of lines) {
          const trimmedLine = line.trim();
          
          // Check for quantity format (e.g., 500x10 or 500*10)
          const match = trimmedLine.match(/^(\d+(?:\.\d+)?)[x*](\d+)$/);
          
          if (match) {
            const amount = parseFloat(match[1]);
            const quantity = parseInt(match[2], 10);
            
            if (!isNaN(amount) && amount > 0 && quantity > 0) {
              // Add the amount 'quantity' times to the array
              for (let i = 0; i < quantity; i++) {
                allAmounts.push(amount);
              }
            }
          } else {
            // Try to parse as a simple number
            const amount = parseFloat(trimmedLine);
            if (!isNaN(amount) && amount > 0) {
              allAmounts.push(amount);
            }
          }
        }
        
        if (allAmounts.length === 0) {
          resultsBody.innerHTML = `
            <tr>
              <td colspan="3" class="px-3 py-4 text-center text-sm text-gray-400">
                No valid amounts found. Please enter numbers greater than 0.
                <br>Example: <span class="text-emerald-300">500x10, 1000x5</span>
              </td>
            </tr>
          `;
          return;
        }
        
        console.log('All amounts to process:', allAmounts); // Debug log
        
        // Process each amount
        allAmounts.forEach(amount => {
          const fee = calculateMpesaFee(amount);
          totalFeesAmount += fee;
          totalAmountValue += amount;
          
          const displayAmount = feePayer === 'customer' ? amount + fee : amount;
          
          const row = document.createElement('tr');
          row.className = 'hover:bg-gray-600';
          row.innerHTML = `
            <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-300">
              ${amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} KES
            </td>
            <td class="px-3 py-2 whitespace-nowrap text-right text-sm text-gray-300">
              ${fee.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} KES
            </td>
            <td class="px-3 py-2 whitespace-nowrap text-right text-sm font-medium text-emerald-400">
              ${displayAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} KES
            </td>
          `;
          resultsBody.appendChild(row);
        });
        
        // Update totals display
        totalTransactions.textContent = allAmounts.length;
        totalAmount.textContent = totalAmountValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' KES';
        totalFees.textContent = totalFeesAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' KES';
        
        // Calculate grand total based on who pays the fees
        let grandTotalValue;
        if (feePayer === 'customer') {
          // Customer pays fees on top of amount
          grandTotalValue = totalAmountValue + totalFeesAmount;
        } else {
          // Business pays fees (deduct from amount)
          grandTotalValue = totalAmountValue;
        }
        
        grandTotal.textContent = grandTotalValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' KES';
        
        console.log('Fee payer:', feePayer);
        console.log('Total amount:', totalAmountValue);
        console.log('Total fees:', totalFeesAmount);
        console.log('Grand total:', grandTotalValue);
        
        // Enable export button
        exportCsvBtn.disabled = false;
      }
      
      // Event Listeners
      uploadBtn.addEventListener('click', () => {
        csvUpload.click();
      });
      
      csvUpload.addEventListener('change', async (e) => {
        const file = e.target.files[0];
        if (file) {
          fileName.textContent = file.name;
          try {
            const amounts = await parseCSV(file);
            amountsInput.value = amounts.join('\n');
          } catch (error) {
            console.error('Error parsing CSV:', error);
            alert('Error reading CSV file. Please make sure it contains valid numbers.');
            fileName.textContent = 'No file chosen';
          }
        }
      });
      
      calculateBtn.addEventListener('click', () => {
        processAmounts(amountsInput.value);
      });
      
      // Recalculate when fee payer changes
      feePayerRadios.forEach(radio => {
        radio.addEventListener('change', () => {
          if (amountsInput.value.trim() !== '') {
            processAmounts(amountsInput.value);
          }
        });
      });
      
      // Export to CSV
      exportCsvBtn.addEventListener('click', () => {
        const rows = [];
        const headers = ['Amount (KES)', 'Fee (KES)', 'Total (KES)'];
        rows.push(headers);
        
        // Get all table rows
        const tableRows = resultsBody.getElementsByTagName('tr');
        for (let i = 0; i < tableRows.length; i++) {
          const cells = tableRows[i].getElementsByTagName('td');
          if (cells.length >= 3) {
            const amount = cells[0].textContent.trim().replace(' KES', '').replace(/,/g, '');
            const fee = cells[1].textContent.trim().replace(' KES', '').replace(/,/g, '');
            const total = cells[2].textContent.trim().replace(' KES', '').replace(/,/g, '');
            rows.push([amount, fee, total]);
          }
        }
        
        // Add summary rows
        rows.push([]); // Empty row
        rows.push(['Total Transactions:', '', document.getElementById('total-transactions').textContent]);
        rows.push(['Total Amount (KES):', '', document.getElementById('total-amount').textContent.replace(' KES', '')]);
        rows.push(['Total Fees (KES):', '', document.getElementById('total-fees').textContent.replace(' KES', '')]);
        rows.push(['Grand Total (KES):', '', document.getElementById('grand-total').textContent.replace(' KES', '')]);
        
        // Convert to CSV
        let csvContent = '';
        rows.forEach(row => {
          csvContent += row.join(',') + '\n';
        });
        
        // Download CSV
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.setAttribute('href', url);
        link.setAttribute('download', `bulk-mpesa-fees-${new Date().toISOString().split('T')[0]}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      });
      
      // Initialize with example data
      amountsInput.value = '500, 1000, 2500, 6000, 10000, 15000, 20000, 30000';
    });
  </script>
  
  <FAQSchema faqItems={faqItems} />
</Layout>
